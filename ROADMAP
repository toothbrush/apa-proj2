* Documentatie 

  Hoog:

  * Design sectie afmaken
    * Belangrijk!! Type system consistent met code. Constraints omdraaien consistent met code. 
      Er missen ook nog een paar rules.

  * Waar faalt onze analyse? Welke programmas werken niet?

  Minder hoog:

  * Voorbeeld programmatjes toevoegen met verwachte analyse output
    Als er nog tijd is een type derivation tree bouwen.


  Minst:

  * Hoofstukje taakverdeling?

* Programma

  Hoog:

  * Solver werkend, plus resultaat koppelen aan annotatie variabelen zodat het
    eindresultaat makkelijk te interpreteren is.

  * Subeffecting voor cases checken en implementeren

  Minder hoog:

  * let f = \\x -> x + 1 in let g = \\y -> y * 2 in let h = \\z -> z 3 in h f + h g

      Expected: ((Nat -> t)^{x,y} -> t)^{z}
      Actual: ((Nat -> t)^{x} -> t)^{z}

    Constatatie: h f + h g synthesized verschillende substituties voor een en de zelfde annotatie variabele

    Oplossing: niet bekend. ergens wordt misschien een constraint te weinig gegenereerd.

  * Hulp programmatje dat alle examples in well-typed/ill-typed directory opent en test of
  ze daadwerkelijk getyped kunnen worden binnen ons systeem.

  * Opschonen, verwijderen code die niet wordt aangeroepen. Zaken consistenter maken.
    Alleen waarneer je er zeker van bent dat het niet de code kapot maakt! Code
    die eventueel nog nuttig is voor de docent uitcommenten en laten staan (simplify, generalise..)
