-------------------------------------------------------------------------------
-- 
-- The type inferencer AG. 
--
-- This is where the functions reside which are needed to
-- convert an HM term (implicitly typed) into a System F term,
-- which is explicitly typed. 
--
-- Author : Paul van der Walt <paul@denknerd.nl>
-------------------------------------------------------------------------------

imports
{
import Data.List
import Data.Maybe

import Debug.Trace
}

attr Tm Tm_
    -- The inferredType attribute will contain the type of the term.
    syn inferredType :: {Ty}
    -- The substitution attribute will contain the needed substitutions 
    -- of the type environment.
    syn substitution :: {TySubst}
    -- The type environment should start empty, then grow as more lambdas
    -- etc. are encountered.
    inh typeEnvironment :: {TyEnv}
    -- The counter is used to generate fresh variable names, which are unique.
    chn counter :: {Int}

attr Tm Tm_
    -- This attribute, on HM.Tm, returns a type-annotated SF.Tm term. 
    syn annotated :: {SF.Tm}

sem Tm
    | Tm  loc.num :: uniqueref counter
sem Tm_
    | Var loc.num :: uniqueref counter
    | Lam loc.num :: uniqueref counter
    | App loc.num :: uniqueref counter
    | Let loc.num :: uniqueref counter 

-- The type environment is modified as specified in Algorithm W. Let's and lambda's 
-- introduce new variables to the environment.
sem Tm_
    | Lam t1.typeEnvironment = (@x, freshVar @loc.num) : @lhs.typeEnvironment
    | App t2.typeEnvironment = applySubst @t1.substitution @lhs.typeEnvironment
    | Let t2.typeEnvironment = let newEnv = applySubst @t1.substitution @lhs.typeEnvironment
                                   (ty', coercion) = generalise newEnv @t1.inferredType
                               in  (@x, ty') : newEnv

sem Tm_
    | Var lhs.annotated = let (ty', coercion) = instantiate (getVar @x @lhs.typeEnvironment)
                              -- note that since we don't label variables in-place,
                              -- the ty' is unused. 
                          in  coercion (SF.Var @x)
    | Lam lhs.annotated = SF.Lam @x 
                                (applySubst @t1.substitution (freshVar @loc.num))
                                (@t1.annotated)
    | App lhs.annotated = SF.App @t1.annotated @t2.annotated
    | Let lhs.annotated = let tyX = applySubst @t1.substitution @t1.inferredType
                              (ty', coercion) =  generalise @lhs.typeEnvironment @t1.inferredType
                              ty = applySubst (Dot @t1.substitution @t2.substitution) (freshVar @loc.num)
                          in  SF.App (SF.Lam @x ty' @t2.annotated) (coercion @t1.annotated) 

-- Calculates the substitution as defined in Algorithm W. 
sem Tm_
    | Var lhs.substitution   = Identity
    | Lam lhs.substitution   = @t1.substitution
    | App lhs.substitution   = let theta1 = @t1.substitution
                                   theta2 = @t2.substitution
                                   theta3 = unify 
                                        (applySubst theta2 @t1.inferredType) 
                                        (Arr (@t2.inferredType) (freshVar @loc.num))
                               in  Dot theta3 (Dot theta2 theta1)
    | Let lhs.substitution   = let theta1 = @t1.substitution
                                   theta2 = @t2.substitution
                               in  Dot theta2 theta1

-- Does the type inference using helper functions defined here and in CCO.Types. 
sem Tm_
    | Var lhs.inferredType   = if @x `elem` domain @lhs.typeEnvironment
                                  then let (ty', coercion) = instantiate (getVar @x @lhs.typeEnvironment)
                                       in   ty' -- the coercion is used elsewhere. 
                                  else error ("Variable "++ @x ++" not found in environment (out of scope).")
    | Lam lhs.inferredType   = let theta1 = @t1.substitution
                                   alpha1 = freshVar @loc.num
                                   tau2   = @t1.inferredType
                               in  Arr (applySubst theta1 alpha1) tau2
    | App lhs.inferredType   = let alpha1 = freshVar @loc.num
                                   theta2 = @t2.substitution
                                   theta3 = unify (applySubst theta2 @t1.inferredType) 
                                                  (Arr (@t2.inferredType) alpha1)
                               in  applySubst theta3 alpha1
    | Let lhs.inferredType   = @t2.inferredType

{
-- | Turn a number (the counter's current value) into a type variable. 
-- NOTE: This assumes the user doesn't use variables like v[0-9]+ in the program. 
--       This seems reasonable, given the scope of the assignment, a workaround
--       shouldn't be difficult to implement.
freshVar :: Int -> Ty
freshVar i = TyVar $ 'v' : show i

-- | Instantiate. Specialise a given polymorphic type
-- with fresh variables. A coercion function is also returned, 
-- which should be used to show where in the original term
-- type instantiations were applied. 
instantiate :: Ty -> (Ty, SF.Tm -> SF.Tm)
instantiate t = let (forallVars, ty') = grabForallVars t
                    -- first get all "forall" bound variables,
                    -- then replace these with fresh variables
                    nvars = zipWith (\ a b -> TyVar (a ++ b)) forallVars (map (('_':).show) [0..])
                    s = foldr (\(o,n) -> Dot (Sub o n)) Identity (zip forallVars nvars)
                    coercion = \t -> foldl SF.TyApp t nvars
                in  (applySubst s ty', coercion)

-- | Unrolls a type, and returns all the variables
-- which are in "forall". This is useful for instantiation, 
-- since these variables will need concrete values.
grabForallVars :: Ty -> ([TyVar], Ty)
grabForallVars t@(TyVar _)    = ([], t) 
grabForallVars t@(Arr t1 t2)  = let (vars, ty) = grabForallVars t2 -- assuming rank 1, 
                                                                   -- we needn't look at t1, since
                                                                   -- forall can't occur there.
                                in  (vars, Arr t1 ty)
grabForallVars (Forall tv t1) = let (vars, ty) = grabForallVars t1
                                in  (tv:vars, ty)

-- | Generalise function. Finds all unbound type variables in
-- a type T, and then makes the type into 
-- "foreach [those variables] T."
-- Also returns a coercion. This is to be applied to the term, 
-- resulting in an SF.Tm with type lambdas at the right spots.
generalise :: TyEnv -> Ty -> (Ty, SF.Tm -> SF.Tm)
generalise env tau = let free = ftv tau \\ ftv env
                         coercion = \t -> foldr SF.TyLam t free 
                     in  (wrapForall free tau, coercion)

-- | Take a list of variables, and wrap them in a Forall 
-- clause. That is, imagine the list of variables [a,b,c] is
-- input along with a certain type T, the output is:
-- forall a,b,c.T.
-- Which is again a type. 
wrapForall :: [Var] -> Ty -> Ty
wrapForall vs t = foldr Forall t vs

-- | This gives us unique variable numbers, incrementing the seed each time.
-- Automatically invoked by AG system when the keyword 'uniqueref' is used next 
-- to an attribute.
nextUnique :: Int -> (Int, Int)
nextUnique u = (u+1, u)

-- | Look up a variable's type in the given environment.
getVar :: Var -> TyEnv -> Ty
getVar x env = case lookup x env of
                Just scheme -> scheme
                _ -> error ("This shouldn't happen. " ++ x ++
                            " wasn't found in the environment.")

-- | This simple alias turns a type environment into the list
-- of variables it contains information for. 
domain = map fst
}
