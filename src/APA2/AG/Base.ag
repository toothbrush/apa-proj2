imports
{
import Data.Set (Set)
}

{
type TyVar  = String
type Var    = String
type Point  = Int
type AnnVar = String
}
-------------------------------------------------------------------------------
-- Syntax
-------------------------------------------------------------------------------

-- Language definition for Mini Haskell
DATA MH
  | VBool  v  : {Bool}
  | VInt   v  : {Integer}
  | Var    x  : {Var}
  | Op     op : String    e1 : MH         e2 : MH
  | Lambda x  : {Var}     e  : MH
  | App    e1 : MH        e2 : MH
  | Let    x  : {Var}     e1 : MH e2 : MH
  | LetRec x  : {Var}     e1 : MH e2 : MH
  | If     c  : MH        e1 : MH e2 : MH
  | Cons   e1 : MH        e2 : MH
  | Nil

DERIVING MH: Show, Eq

DATA TyScheme
  | Ty     ty : Ty
  | Forall a  : {TyVar} ts : TyScheme

DERIVING TyScheme: Show, Eq

DATA Ty
  | TyVar a   : {TyVar}
  | Arr   ty1 : Ty      ty2 : Ty     ann : {SAnn}
  | List  ty  : Ty      ann : {SAnn}
  | Nat
  | Bool

DERIVING Ty: Eq

DATA SAnn
  | AnnPoint p   : {Point}
  | AnnVar   var : {AnnVar}

DERIVING SAnn: Show, Eq, Ord

{
instance Show Ty where
  show (TyVar a) = a
  show (Arr t t' (AnnVar v)) = show t ++ "--"++ v ++ "-->" ++ show t'
  show Nat = "Nat"
  show Bool = "Bool"
  show (List t an) = "List^" ++ show an ++ " " ++ show t
}
