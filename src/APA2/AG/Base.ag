imports
{
import Data.Set (Set, toList)
import Data.List (intercalate)
}

{
type TyVar  = String
type Var    = String
type Point  = String
type AnnVar = String
type Constraints = Set Constraint
}
-------------------------------------------------------------------------------
-- Syntax
-------------------------------------------------------------------------------

-- Language definition for Mini Haskell
DATA MH
  | VBool  v  : {Bool}
  | VInt   v  : {Integer}
  | Var    x  : {Var}
  | Op     op : String e1 : MH          e2 : MH
  | Lambda x  : {Var}  e  : MH
  | App    e1 : MH     e2 : MH
  | Let    x  : {Var}  e1 : MH          e2 : MH
  | LetRec f  : {Var}  x  : {Maybe Var} e1 : MH e2 : MH
  | If     c  : MH     e1 : MH          e2 : MH
  | Cons   e1 : MH     e2 : MH
  | Nil
  | CaseBlck ex  : MH cs   : Cases
  | CaseAlt  pat : MH bnds : MH

DERIVING MH: Eq

TYPE Cases = [MH]

DATA TyScheme
  | Ty     ty : Ty
  | Forall a : {TyVar}  ts : TyScheme
  | AnnSig a : {AnnVar} ts : TyScheme

DERIVING TyScheme: Show, Eq

DATA Ty
  | TyVar a   : {TyVar}
  | Arr   ty1 : Ty ty2 : Ty  ann : {AnnVar}
  | List  ty  : Ty ann : {AnnVar} -- builtin List is an addition
  | Nat
  | Bool

DERIVING Ty: Eq

-- | We need to make the set operations explicit, since it is also possible to
-- have something like β∪{h}
DATA SAnn
  | AnnVar   var    : {AnnVar}
  | AnnEmpty
  | AnnSet   points : {Set Point}

DERIVING SAnn: Eq, Ord

DATA Constraint
  | Constraint a1 : AnnVar a2 : SAnn

DERIVING Constraint: Eq, Ord

DATA SimpleSubstitution
  | Identity
  | TySub  tv : {TyVar} t  : Ty
  | AnnSub a1 : {AnnVar}    a2 : {AnnVar} -- annotation substitution
  | Dot    s1 : SimpleSubstitution s2 : SimpleSubstitution

{
instance Show Constraint where
  show (Constraint a1 a2) = show a1 ++ " ⊇ " ++ show a2

instance Show SAnn where
  show (AnnVar var) = var
  show (AnnSet ps)  = "{" ++  intercalate ", " (toList ps) ++  "}"
  show (AnnEmpty)   = "{}"

instance Show MH where
  show (VBool  v          ) = show v
  show (VInt   v          ) = show v
  show (Var    x          ) =      x
  show (Op     op e1 e2   ) = show e1 ++ op ++ show e2
  show (Lambda x  e       ) = "λ "++x++" → " ++ show e
  show (App    e1 e2      ) = show e1 ++ " " ++ show e2
  show (Let    x  e1 e2   ) = "let "++ x ++" = " ++ show e1 ++ " in " ++ show e2
  show (LetRec f  x  e1 e2) = "μ " ++ show f ++ ".let "++ fromMaybe "undef??FIXME" x ++" = " ++ show e1 ++ " in " ++ show e2
  show (If     c  e1 e2   ) = "if "++show c++" then " ++ show e1 ++ " else " ++ show e2
  show (Cons   e1 e2      ) = show e1 ++ ":"++show e2
  show (Nil               ) = "[]"
  show (CaseBlck ex  cs   ) = "case "   ++ show ex  ++ " of\n" ++ concatMap show cs
  show (CaseAlt  pat bnds ) = "        "++ show pat ++ "\t → " ++ show bnds ++ "\n"

instance Show Ty where
  show (TyVar a)    = a
  show (Arr t t' a) = show t ++ "--"++ a ++ "-->" ++ show t'
  show Nat          = "Nat"
  show Bool         = "Bool"
  show (List t an)  = "List^{" ++ an ++ "} " ++ show t

instance Show SimpleSubstitution where
  show Identity      = ""
  show (TySub v t)   = v ++ " |-> " ++ show t ++ " "
  show (AnnSub a a') = a ++ " |-> " ++ a' ++ " "
  show (Dot s s')    = show s ++ show s'

}
