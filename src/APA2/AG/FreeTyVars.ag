-- | Collect all free type variables
ATTR TyScheme Ty TyEnv Qual TyEnv
  [|| ftv  USE {`DS.union`} {DS.empty} : {Set TyVar}   -- alias String
  ]

SEM TyScheme
  | Forall lhs.ftv  = @ts.ftv  DS.\\ DS.singleton @a

SEM Ty
  | TyVar lhs.ftv = DS.singleton @a

SEM TyEnv
  | Entry lhs.ftv = @val.ftv `DS.union` @tl.ftv
  | Nil   lhs.ftv = DS.empty

{
class FreeTypeVariables a where
  ftv :: a -> Set TyVar -- alias String

instance FreeTypeVariables TyScheme where
  ftv x = ftv_Syn_TyScheme (wrap_TyScheme (sem_TyScheme x) Inh_TyScheme)

instance FreeTypeVariables Ty where
  ftv x = ftv_Syn_Ty (wrap_Ty (sem_Ty x) Inh_Ty)

instance FreeTypeVariables TyEnv where
  ftv x = ftv_Syn_TyEnv (wrap_TyEnv (sem_TyEnv x) Inh_TyEnv)
}
