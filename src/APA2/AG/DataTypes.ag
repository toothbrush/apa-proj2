optpragmas {
{-# LANGUAGE FlexibleContexts,
             FlexibleInstances,
             UndecidableInstances,
             MultiParamTypeClasses #-}
}
imports
{
import Data.Set (Set, toList)
import qualified Data.Map as DM
import Data.Map (Map)
import qualified Data.Map as M (toList)
import Data.List (intercalate)
}

{
type TyVar  = String
type Var    = String
type Point  = String
type AnnVar = String
type Constraints = Set Constraint
type Expressions = [(Ty,MH)]
}
-------------------------------------------------------------------------------
-- Syntax
-------------------------------------------------------------------------------

-- Language definition for Mini Haskell
DATA MH
  | VBool  v  : {Bool}
  | VInt   v  : {Integer}
  | Var    x  : {Var}
  | Op     op : String e1 : MH          e2 : MH
  | Lambda x  : {Var}  e  : MH
  | App    e1 : MH     e2 : MH
  | Let    x  : {Var}  e1 : MH          e2 : MH
  | LetRec f  : {Var}  x  : {Maybe Var} e1 : MH e2 : MH
  | If     c  : MH     e1 : MH          e2 : MH
  | Cons   e1 : MH     e2 : MH
  | Nil
  | CaseBlck e  : MH c1  : MH c2 : MH
  | CaseAlt  pat : MH bnd : MH

DERIVING MH: Eq

{- TYPE Cases = [MH]-}

DATA Qual
  | Ty   ty : Ty
  | Qual c  : Constraint q : Qual

DERIVING Qual: Eq

DATA TyScheme
  | QualSig q : Qual
  | Forall  a : {TyVar}  ts : TyScheme
  | AnnSig  a : {AnnVar} ts : TyScheme

DERIVING TyScheme: Eq

DATA Ty
  | TyVar a   : {TyVar}
  | Arr   ty1 : Ty ann1 : SAnn ty2 : Ty ann2 : SAnn
  | List  ty  : Ty ann : SAnn -- builtin List is an addition
  | Nat
  | Bool

DERIVING Ty: Eq, Ord

-- | We need to make the set operations explicit, since it is also possible to
-- have something like β∪{h}
DATA SAnn
  | AnnVar   var    : {AnnVar}
  | AnnEmpty
  | AnnSet   points : {Set Point}

DERIVING SAnn: Eq, Ord

DATA Constraint
  | Constraint a1 : SAnn a2 : SAnn

DERIVING Constraint: Eq, Ord

DATA SimpleSubstitution
  | Identity
  | TySub  tv : {TyVar} t  : Ty
  | AnnSub a1 : {AnnVar}    a2 : {SAnn} -- annotation substitution
  | Dot    s1 : SimpleSubstitution s2 : SimpleSubstitution

DERIVING SimpleSubstitution: Eq, Ord

TYPE TyEnv = MAP {Var} TyScheme

TYPE AnnEnv = MAP {Var} {SAnn}

{
instance Show Constraint where
  show (Constraint a1 a2) = show a1 ++ " ⊇ " ++ show a2

instance Show MH where
  show (VBool  v           ) = show v
  show (VInt   v           ) = show v
  show (Var    x           ) = x
  show (Op     op e1 e2    ) = show e1    ++ op       ++ show e2
  show (Lambda x  e        ) = "λ "       ++ x        ++ " → "    ++ show e
  show (App    e1 e2       ) = show e1    ++ " "      ++ show e2
  show (Let    x  e1 e2    ) = "let "     ++ x        ++ " = "
                               ++ show e1 ++ " in "   ++ show e2
  show (LetRec f  x  e1 e2 ) = "μ "       ++ f        ++ ".let "
                               ++ fromMaybe "undefined" x
                               ++ " = "   ++ show e1  ++ " in "   ++ show e2
  show (If     c  e1 e2    ) = "if "      ++ show c   ++ " then " ++ show e1
                               ++ " else "++ show e2
  show (Cons   e1 e2       ) = show e1    ++ ":"      ++ show e2
  show (Nil                ) = "[]"
  show (CaseBlck ex  c1 c2 ) = "case "    ++ show ex  ++ " of\n"  ++ show c1   ++ show c2
  show (CaseAlt  pat bnds  ) = "        " ++ show pat ++ "\t → "  ++ show bnds ++ "\n"

instance Show TyScheme where
  show (QualSig q)   = show q
  show (Forall a ts) = "∀" ++ a ++ ". " ++ show ts
  show (AnnSig a ts) = "∀" ++ a ++ ". " ++ show ts

instance Show Qual where
  show (Ty t)     = tyLayout DM.empty t
  show (Qual c q) = show c ++ " => " ++ show q

tyAnn :: (Show a1, Show a) => a -> a1 -> [Char]
tyAnn t a = "(" ++ show t ++ (colonOpt $ show a) ++ ")"

tyAnnCont :: Show a => Map AnnVar SAnn -> a -> AnnVar -> [Char]
tyAnnCont con t a = "(" ++ show t ++ (colonOpt $ a `from` con) ++ ")"

colonOpt :: String -> String
colonOpt []   = ""
colonOpt xs   = " : " ++ xs

instance Show SAnn where
  show (AnnVar var) = var
  show (AnnSet ps)  = "{" ++  intercalate ", " (toList ps) ++  "}"
  show (AnnEmpty)   = "" -- really "{}"

instance Show Ty where
  show (TyVar a)    = a
  show (Arr t a t' a') = tyAnn t a ++ " ➔  " ++ tyAnn t' a'
  show Nat          = "Nat"
  show Bool         = "Bool"
  show (List t an)  = "(List " ++ show t ++ ") " ++ (colonOpt $ show an)

tyLayout :: Map AnnVar SAnn -> Ty -> String
tyLayout _   (TyVar a)       = a -- we probably don't want to see this here. 
tyLayout con (Arr t a t' a') = tyAnnCont con t ((fromSAnn a) `from` con) ++ " ➔  " ++ tyAnnCont con t' ((fromSAnn a') `from` con)
tyLayout _   Nat             = "Nat"
tyLayout _   Bool            = "Bool"
tyLayout con (List t an)     = "((List " ++ tyLayout con t ++ ") " ++ (colonOpt $ (fromSAnn an) `from` con) ++ ")"

from :: AnnVar -> Map AnnVar SAnn -> String
from ann con = show $ DM.findWithDefault (AnnVar ann) ann con

-- | Unpacks SAnn datatype and returns an AnnVar string
fromSAnn :: SAnn -> String
fromSAnn (AnnVar v) = v
fromSAnn  AnnEmpty  = ""
fromSAnn x          = show x

-- | Unpacks an AnnSet to get the inner set
toSet :: SAnn -> Set Point
toSet    (AnnSet x) = x
toSet    _          = DS.empty


instance Show SimpleSubstitution where
  show Identity      = ""
  show (TySub v t)   = v ++ "  ⟼   " ++ show t
  show (AnnSub a a') = a ++ "  ⟼   " ++ show a'
  show (Dot s Identity) = show s
  show (Dot s s')       = show s ++ "\n" ++ show s'

ppMap :: (Show b) => Map String b -> String
ppMap x = let f (a, b) = a ++ " == " ++ show b
              l = map f $ M.toList x
          in "{\n" ++ intercalate "\n" l ++ "\n}"

{-
instance Show Ty where
  show (TyVar a)    = "TyVar \"" ++ a ++ "\""
  show (Arr t a t' a') = "Arr ("++show t++") ("++show a++") ("++show t'++") ("++show a'++")"
  show Nat          = "Nat"
  show Bool         = "Bool"
  show (List t an)  = "List (" ++ show t ++ ") (" ++ show an ++ ")"

instance Show SAnn where
  show (AnnVar var) = "AnnVar (\""++var++"\")"
  show (AnnSet ps)  = "{" ++  intercalate ", " (toList ps) ++  "}"
  show (AnnEmpty)   = "{}"

instance Show SimpleSubstitution where
  show Identity      = "Identity"
  show (TySub v t)   = "TySub (\"" ++ v ++ "\") (" ++ show t ++ ")"
  show (AnnSub a a') = "AnnSub (" ++ show a ++ ") (" ++ show a' ++ ")"
  show (Dot s s') = "Dot (" ++ show s ++ ") (" ++ show s' ++ ")"
-}

}
