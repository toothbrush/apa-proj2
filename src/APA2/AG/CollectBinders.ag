{
data Binders = Binders [TyVar] [AnnVar] Constraints Ty
}

ATTR TyScheme Qual
  [|| binders : {Binders}   -- alias String
  ]

SEM TyScheme
  | Forall  lhs.binders = let (Binders vars avars cs ty) = @ts.binders
                          in   Binders (@a:vars) avars cs ty
  | AnnSig  lhs.binders = let (Binders vars avars cs ty) = @ts.binders
                          in   Binders vars (@a:avars) cs ty

SEM Qual
  | Ty   lhs.binders = Binders [] [] DS.empty @ty.copy
  | Qual lhs.binders = let (Binders tvs avs cs ty) = @q.binders
                       in   Binders tvs avs (DS.insert @c.copy cs) ty

{
collectBinders :: TyScheme -> Binders
collectBinders ty = binders_Syn_TyScheme (wrap_TyScheme (sem_TyScheme ty) Inh_TyScheme)
}
