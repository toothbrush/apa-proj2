{
type Binders = ([TyVar], [AnnVar], Qual)
}

ATTR TyScheme Qual
  [|| binders : {Binders}   -- alias String
  ]

SEM TyScheme
  | Forall  lhs.binders = let (vars, avars, ty) = @ts.binders
                          in (@a:vars, avars, ty)
  | AnnSig  lhs.binders = let (vars, avars, ty) = @ts.binders
                          in (vars, @a:avars, ty)

SEM Qual
  | Ty   lhs.binders = ([], [], @self)
  | Qual lhs.binders = ([], [], @self)

{
collectBinders :: TyScheme -> Binders
collectBinders ty = binders_Syn_TyScheme (wrap_TyScheme (sem_TyScheme ty) Inh_TyScheme)
}
